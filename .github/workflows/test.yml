name: build-and-deploy
on:
  workflow_dispatch:
jobs:
  deploy-aws-cdk:
    name: Deploy AWS CDK stack
    needs: [cache_node_modules, build_eleventy_site]
    runs-on: ubuntu-latest
    environment: deployment
    env:
      REGION: ${{ secrets.REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_CDK_DEPLOY_ROLE_ARN: ${{ secrets.AWS_CDK_DEPLOY_ROLE_ARN }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16.3.0"
      - id: cache_node_modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Clean install dependencies
        if: steps.cache_node_modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Create cdk.context.json with env variables
        run: | 
          touch cdk.context.json
          echo '{ "DOMAIN_NAME": "${{ env.DOMAIN_NAME }}", "REGION": "${{ env.REGION }}" }' >> cdk.context.json
      - name: Synth CDK
        run: npm run cdk -- synth
      - name: Deploy CDK
        run: npm run cdk -- --role-arn ${{ env.AWS_CDK_DEPLOY_ROLE_ARN }} deploy --all --require-approval never
